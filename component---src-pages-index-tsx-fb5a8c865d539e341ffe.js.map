{"version":3,"file":"component---src-pages-index-tsx-fb5a8c865d539e341ffe.js","mappings":"0MA0BA,MApBmD,YAK/C,IALyD,MAC3DA,EAAK,KACLC,EAAI,QACJC,EAAO,KACPC,GACD,EACC,OACEC,EAAAA,cAACC,EAAAA,GAAI,CAACC,GAAIH,GACRC,EAAAA,cAAAA,MAAAA,CAAKG,UAAU,0DACbH,EAAAA,cAAAA,KAAAA,CAAIG,UAAU,2BAA2BP,GACzCI,EAAAA,cAAAA,MAAAA,CAAKG,UAAU,qBAAqBL,GACpCE,EAAAA,cAAAA,MAAAA,CAAKG,UAAU,6DACbH,EAAAA,cAAAA,SAAAA,CAAQG,UAAU,eAAc,gBAChCH,EAAAA,cAAAA,OAAAA,CAAMG,UAAU,QAAQN,KAKlC,ECwBA,MAtC0B,SACxBO,GAEA,MAAMC,GACJC,EAAAA,EAAAA,QAAuB,MACnBC,GACJD,EAAAA,EAAAA,QAA6B,OACzB,EAACE,EAAM,EAACC,IAAYC,EAAAA,EAAAA,UAAiB,GAyB3C,OAvBAC,EAAAA,EAAAA,YAAU,KACRJ,EAASK,QAAU,IAAIC,sBAAqB,CAACC,EAASP,KAC/CO,EAAQ,GAAGC,iBAEhBN,GAASO,GAASA,EAAQ,IAC1BT,EAASU,UAAUH,EAAQ,GAAGI,QAAO,GACrC,GACD,KAEHP,EAAAA,EAAAA,YAAU,KApBqB,EAsBAH,GAASJ,EAAMe,QACjB,OAAzBd,EAAaO,SAC4B,IAAzCP,EAAaO,QAAQQ,SAASD,QACT,OAArBZ,EAASK,SAIXL,EAASK,QAAQS,QACfhB,EAAaO,QAAQQ,SAASf,EAAaO,QAAQQ,SAASD,OAAS,GACtE,GACA,CAACX,IAEG,CACLH,eACAiB,SAAUlB,EAAMmB,MAAM,EApCO,EAoCJf,GAE7B,ECjBA,MApBmD,YAAsB,IAAZ,MAAEJ,GAAO,EACpE,MAAM,aAAEC,EAAY,SAAEiB,GAAaE,EAAkBpB,GAErD,OACEJ,EAAAA,cAAAA,MAAAA,CAAKG,UAAU,MAAMsB,IAAKpB,GACvBiB,EAASI,KACRC,IAAAA,IACEC,MAAM,GACJC,EACAC,QAAQ,KAAEC,GAAM,YAChBC,IAEe,SACjBhC,EAAAA,cAACiC,EAAQ,iBAAKD,EAAW,CAAEjC,KAAMgC,EAAMG,IAAKL,IAAM,IAK5D,E,SCeA,MApBqD,SAAU,GAO5D,IANDM,MACEC,MACEC,cAAc,MAAEzC,EAAK,YAAE0C,EAAW,SAAEC,EAAQ,QAAEC,IAEhDC,mBAAmB,MAAEC,KAExB,EACC,OACE1C,EAAAA,cAAC2C,EAAAA,EAAQ,CACP/C,MAAOA,EACP0C,YAAaA,EACbC,SAAUA,EACVC,QAASA,GAETxC,EAAAA,cAAC4C,EAAQ,CAACxC,MAAOsC,IAGvB,C","sources":["webpack://gatsby-starter-default/./src/components/main/PostItem.tsx","webpack://gatsby-starter-default/./src/hooks/useInfiniteScroll.tsx","webpack://gatsby-starter-default/./src/components/main/PostList.tsx","webpack://gatsby-starter-default/./src/pages/index.tsx"],"sourcesContent":["import React, { FunctionComponent } from 'react';\r\nimport { Link } from 'gatsby';\r\nimport { PostFrontmatterType } from 'types/PostItem.types';\r\n\r\ntype PostItemProps = PostFrontmatterType & { link: string };\r\n\r\nconst PostItem: FunctionComponent<PostItemProps> = function ({\r\n  title,\r\n  date,\r\n  summary,\r\n  link,\r\n}) {\r\n  return (\r\n    <Link to={link}>\r\n      <div className=\"pt-4 pb-2 border-b-2 border-light__bar dark:border-bar\">\r\n        <h2 className=\"mb-2 text-3xl font-bold\">{title}</h2>\r\n        <div className=\"mt-4 line-clamp-3\">{summary}</div>\r\n        <div className=\"mt-4 space-x-2 divide-x divide-light__bar dark:divide-bar\">\r\n          <strong className=\"font-normal\">ubububububub</strong>\r\n          <time className=\"pl-2\">{date}</time>\r\n        </div>\r\n      </div>\r\n    </Link>\r\n  );\r\n};\r\n\r\nexport default PostItem;\r\n","import { MutableRefObject, useState, useEffect, useRef } from 'react';\r\nimport { PostListItemType } from 'types/PostItem.types';\r\n\r\nexport type useInfiniteScrollType = {\r\n  containerRef: MutableRefObject<HTMLDivElement | null>;\r\n  postList: PostListItemType[];\r\n};\r\n\r\nconst NUMBER_OF_ITEMS_PER_PAGE = 3;\r\n\r\nconst useInfiniteScroll = function (\r\n  posts: PostListItemType[],\r\n): useInfiniteScrollType {\r\n  const containerRef: MutableRefObject<HTMLDivElement | null> =\r\n    useRef<HTMLDivElement>(null);\r\n  const observer: MutableRefObject<IntersectionObserver | null> =\r\n    useRef<IntersectionObserver>(null);\r\n  const [count, setCount] = useState<number>(1);\r\n\r\n  useEffect(() => {\r\n    observer.current = new IntersectionObserver((entries, observer) => {\r\n      if (!entries[0].isIntersecting) return;\r\n\r\n      setCount(value => value + 1);\r\n      observer.unobserve(entries[0].target);\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      NUMBER_OF_ITEMS_PER_PAGE * count >= posts.length ||\r\n      containerRef.current === null ||\r\n      containerRef.current.children.length === 0 ||\r\n      observer.current === null\r\n    )\r\n      return;\r\n\r\n    observer.current.observe(\r\n      containerRef.current.children[containerRef.current.children.length - 1],\r\n    );\r\n  }, [count]);\r\n\r\n  return {\r\n    containerRef,\r\n    postList: posts.slice(0, count * NUMBER_OF_ITEMS_PER_PAGE),\r\n  };\r\n};\r\n\r\nexport default useInfiniteScroll;\r\n","import React, { FunctionComponent } from 'react';\r\nimport PostItem from 'components/main/PostItem';\r\nimport { PostListItemType } from 'types/PostItem.types';\r\nimport useInfiniteScroll from 'hooks/useInfiniteScroll';\r\n\r\ntype PostListProps = {\r\n  posts: PostListItemType[];\r\n};\r\n\r\nconst PostList: FunctionComponent<PostListProps> = function ({ posts }) {\r\n  const { containerRef, postList } = useInfiniteScroll(posts);\r\n\r\n  return (\r\n    <div className=\"p-4\" ref={containerRef}>\r\n      {postList.map(\r\n        ({\r\n          node: {\r\n            id,\r\n            fields: { slug },\r\n            frontmatter,\r\n          },\r\n        }: PostListItemType) => (\r\n          <PostItem {...frontmatter} link={slug} key={id} />\r\n        ),\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostList;\r\n","import React, { FunctionComponent } from 'react';\r\nimport PostList from 'components/main/PostList';\r\nimport { graphql } from 'gatsby';\r\nimport { PostListItemType } from 'types/PostItem.types';\r\nimport Template from 'components/common/Template';\r\n\r\ntype IndexPageProps = {\r\n  data: {\r\n    site: {\r\n      siteMetadata: {\r\n        title: string;\r\n        description: string;\r\n        imageUrl: string;\r\n        siteUrl: string;\r\n      };\r\n    };\r\n    allMarkdownRemark: {\r\n      edges: PostListItemType[];\r\n    };\r\n  };\r\n};\r\n\r\nconst IndexPage: FunctionComponent<IndexPageProps> = function ({\r\n  data: {\r\n    site: {\r\n      siteMetadata: { title, description, imageUrl, siteUrl },\r\n    },\r\n    allMarkdownRemark: { edges },\r\n  },\r\n}) {\r\n  return (\r\n    <Template\r\n      title={title}\r\n      description={description}\r\n      imageUrl={imageUrl}\r\n      siteUrl={siteUrl}\r\n    >\r\n      <PostList posts={edges} />\r\n    </Template>\r\n  );\r\n};\r\n\r\nexport default IndexPage;\r\n\r\nexport const getPostList = graphql`\r\n  query getPostList {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n        description\r\n        imageUrl\r\n        siteUrl\r\n      }\r\n    }\r\n    allMarkdownRemark(\r\n      sort: { order: DESC, fields: [frontmatter___date, frontmatter___title] }\r\n    ) {\r\n      edges {\r\n        node {\r\n          id\r\n          fields {\r\n            slug\r\n          }\r\n          frontmatter {\r\n            title\r\n            summary\r\n            date(formatString: \"YYYY.MM.DD.\")\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n"],"names":["title","date","summary","link","React","Link","to","className","posts","containerRef","useRef","observer","count","setCount","useState","useEffect","current","IntersectionObserver","entries","isIntersecting","value","unobserve","target","length","children","observe","postList","slice","useInfiniteScroll","ref","map","_ref2","node","id","fields","slug","frontmatter","PostItem","key","data","site","siteMetadata","description","imageUrl","siteUrl","allMarkdownRemark","edges","Template","PostList"],"sourceRoot":""}